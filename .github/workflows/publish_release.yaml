
name: Publish Release

# 手動実行
on:
  workflow_dispatch:
    inputs:
      version:
        type: string
        description: 'リリースするバージョン (例: 0.6.0, v はつけない)'
        required: true
        default: ''

# ジョブの定義
jobs:

  # インストーラーのビルド
  build_installer:
    uses: tsukumijima/KonomiTV/.github/workflows/build_installer.yaml@master

  # サードパーティーライブラリのビルド
  build_thirdparty:
    uses: tsukumijima/KonomiTV/.github/workflows/build_thirdparty.yaml@master

  # 両方のビルドが終わったら、タグ付けしてリリースを公開
  publish_release:
    needs:
      - build_installer
      - build_thirdparty
    runs-on: ubuntu-22.04
    steps:

      # Node.js 16 のセットアップ
      - name: Setup Node.js 16
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      # KonomiTV のソースコードをチェックアウト
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          path: KonomiTV
          token: ${{ secrets.GIT_PUSH_TOKEN }}

      # リリースコミットを作成
      - name: Create Release Commit
        working-directory: KonomiTV
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git switch master
          # ソースコードやドキュメントのバージョンを更新
          sed -i -e 's|"version": ".*",|"version": "${{ github.event.inputs.version }}",|' client/package.json
          sed -i -e "s|TARGET_VERSION = '.*'|TARGET_VERSION = '${{ github.event.inputs.version }}'|" installer/KonomiTV-Installer.py
          sed -i -e "s|VERSION = '.*'|VERSION = '${{ github.event.inputs.version }}'|" server/app/constants.py
          sed -i -e 's|download/v.*/thirdparty-linux\.tar\.xz|download/v${{ github.event.inputs.version }}/thirdparty-linux\.tar\.xz|' Dockerfile
          sed -i -e 's|download/v.*/KonomiTV-Installer\.elf|download/v${{ github.event.inputs.version }}/KonomiTV-Installer\.elf|' Readme.md
          # クライアントをビルド
          # GitHub Actions 環境ではなぜか --ignore-scripts をつけないと patch-package の実行エラーでそのままエラー終了してしまう
          cd client/
          yarn install --ignore-scripts
          yarn build
          cd ../
          # リリースコミットを作成
          git add .
          git commit -m 'Release: version ${{ github.event.inputs.version }}'
          git push

      # release ブランチを現在の master ブランチの最新コミット (リリースコミット) に更新する
      ## release ブランチはリリースしたときのみ更新される
      - name: Update Release Branch
        working-directory: KonomiTV
        run: |
          git switch release
          git merge master
          git push

      # リリースコミットに対応する新バージョンのタグを release ブランチで作成
      - name: Create New Version Tag
        working-directory: KonomiTV
        run: |
          git tag v${{ github.event.inputs.version }} release
          git push origin --tags

      # ビルドしたインストーラーとサードパーティライブラリをダウンロード
      - name: Download Installer and Thirdparty Libraries
        run: |
          curl -LO https://nightly.link/tsukumijima/KonomiTV/workflows/build_installer.yaml/master/KonomiTV-Installer.exe.zip
          unzip KonomiTV-Installer.exe.zip && rm KonomiTV-Installer.exe.zip
          curl -LO https://nightly.link/tsukumijima/KonomiTV/workflows/build_installer.yaml/master/KonomiTV-Installer.elf.zip
          unzip KonomiTV-Installer.elf.zip && rm KonomiTV-Installer.elf.zip
          curl -LO https://nightly.link/tsukumijima/KonomiTV/workflows/build_thirdparty.yaml/master/thirdparty-windows.7z.zip
          unzip thirdparty-windows.7z.zip && rm thirdparty-windows.7z.zip
          curl -LO https://nightly.link/tsukumijima/KonomiTV/workflows/build_thirdparty.yaml/master/thirdparty-linux.tar.xz.zip
          unzip thirdparty-linux.tar.xz.zip && rm thirdparty-linux.tar.xz.zip

      # リリースを作成
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "KonomiTV-Installer.exe,KonomiTV-Installer.elf,thirdparty-windows.7z,thirdparty-linux.tar.xz"
          generateReleaseNotes: true
          name: KonomiTV (β) ${{ github.event.inputs.version }}
          tag: v${{ github.event.inputs.version }}
